#node object
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

#linkedlist of nodes
class LinkedList:
    def __init__(self):
        self.head = None
        
    #printing until there's no next (next is not None)
    def print_list(self):
        temp = self.head
        while (temp):
            print(temp.data, end="->")
            temp = temp.next
            
    #if list is empty, add element to head, otherwise iterate until there's no next and place element there
    def append(self, val):
        new_node = Node(val)
        if self.head == None:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        
def merge_linked(h1,h2):
    if (h1 is None) and (h2 is None):
        return []
    if h1 is None:
        return h2
    if h2 is None:
        return h1
    l3 = None
    
    #recursively sort the linked list
    if h1.data <= h2.data:
        l3 = h1
        l3.next = merge_linked(h1.next, h2)
    else:
        l3 = h2
        l3.next = merge_linked(h1, h2.next)
    return l3
    

if __name__ == '__main__': 

    #Linked list 1 
    list1 = LinkedList() 
    list1.append(1) 
    list1.append(2) 
    list1.append(4)  

    #Linked list 2 : 
    list2 = LinkedList() 
    list2.append(1) 
    list2.append(3) 
    list2.append(4) 

    # Output Linked List 
    list3 = LinkedList() 
    list3.head = merge_linked(list1.head, list2.head) 

    print(" Merged Linked List : ", end="") 
    list3.print_list()
